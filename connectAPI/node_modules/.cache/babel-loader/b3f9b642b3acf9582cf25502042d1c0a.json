{"ast":null,"code":"var _jsxFileName = \"/Users/jackyao/learn_react/connectAPI/src/App.js\";\nimport React, { useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  // const dummyMovies = [\n  //   {\n  //     id: 1,\n  //     title: 'Some Dummy Movie',\n  //     openingText: 'This is the opening text of the movie',\n  //     releaseDate: '2021-05-18',\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Some Dummy Movie 2',\n  //     openingText: 'This is the second opening text of the movie',\n  //     releaseDate: '2021-05-19',\n  //   },\n  // ];\n  const [movies, setMovies] = useState([]); // adding a second state to show loading data from api or done\n\n  const [isLoading, setIsloading] = useState(false); // adding a second state to show error\n\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = async () => {\n    setIsloading(true);\n    setError(null); // we use try catch to handle error when using async/await\n    // we have to throw error to catch in case http request errored\n\n    try {\n      const result = await fetch(\"https://swapi.dev/api/film\");\n      const data = await result.json();\n\n      if (!result.ok) {\n        throw new Error('Something went wrong');\n      } // transform data\n\n\n      const transferomData = data.results.map(movie => {\n        return {\n          id: movie.episode_id,\n          title: movie.title,\n          openingText: movie.opening_crawl,\n          releaseDate: movie.release_date\n        };\n      });\n      setMovies(transferomData);\n      setIsloading(false);\n    } catch (error) {\n      setError(error.message);\n      setIsloading(false);\n    }\n  }; // way 2\n  // async function fetchMoviesHandler() {\n  //   const result = await fetch(\"https://swapi.dev/api/films\")\n  //   const data = await result.json()\n  //   // transform data\n  //   const transferomData = data.results.map((movie) => {\n  //     return {\n  //       id: movie.episode_id,\n  //       title: movie.title,\n  //       openingText: movie.opening_crawl,\n  //       releaseDate: movie.release_date,\n  //     };\n  //   });\n  //   setMovies(transferomData);\n  // }\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, !isLoading && movies.length > 0 && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 45\n    }\n  }), !isLoading && movies.length === 0 && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 47\n    }\n  }, \"No movies to show\"), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 23\n    }\n  }, \"Loading...\"), !isLoading && error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 33\n    }\n  }, error)));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jackyao/learn_react/connectAPI/src/App.js"],"names":["React","useState","MoviesList","App","movies","setMovies","isLoading","setIsloading","error","setError","fetchMoviesHandler","result","fetch","data","json","ok","Error","transferomData","results","map","movie","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC,CAhBa,CAkBb;;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C,CAnBa,CAqBb;;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMS,kBAAkB,GAAG,YAAY;AACrCH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR,CAFqC,CAIrC;AACA;;AAEA,QAAI;AACF,YAAME,MAAM,GAAG,MAAMC,KAAK,CAAC,4BAAD,CAA1B;AACA,YAAMC,IAAI,GAAG,MAAMF,MAAM,CAACG,IAAP,EAAnB;;AAEA,UAAI,CAACH,MAAM,CAACI,EAAZ,EAAgB;AACd,cAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD,OANC,CAQF;;;AACA,YAAMC,cAAc,GAAGJ,IAAI,CAACK,OAAL,CAAaC,GAAb,CAAkBC,KAAD,IAAW;AACjD,eAAO;AACLC,UAAAA,EAAE,EAAED,KAAK,CAACE,UADL;AAELC,UAAAA,KAAK,EAAEH,KAAK,CAACG,KAFR;AAGLC,UAAAA,WAAW,EAAEJ,KAAK,CAACK,aAHd;AAILC,UAAAA,WAAW,EAAEN,KAAK,CAACO;AAJd,SAAP;AAMD,OAPsB,CAAvB;AASAtB,MAAAA,SAAS,CAACY,cAAD,CAAT;AACAV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KApBD,CAoBE,OAAOC,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAACD,KAAK,CAACoB,OAAP,CAAR;AACArB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GA/BD,CAxBa,CAyDb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEG,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACJ,SAAD,IAAcF,MAAM,CAACyB,MAAP,GAAgB,CAA9B,iBAAmC,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEzB,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADtC,EAEG,CAACE,SAAD,IAAcF,MAAM,CAACyB,MAAP,KAAkB,CAAhC,iBAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFxC,EAGGvB,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHhB,EAIG,CAACA,SAAD,IAAcE,KAAd,iBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAJ,CAJ1B,CAJF,CADF;AAaD;;AAED,eAAeL,GAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  // const dummyMovies = [\n  //   {\n  //     id: 1,\n  //     title: 'Some Dummy Movie',\n  //     openingText: 'This is the opening text of the movie',\n  //     releaseDate: '2021-05-18',\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Some Dummy Movie 2',\n  //     openingText: 'This is the second opening text of the movie',\n  //     releaseDate: '2021-05-19',\n  //   },\n  // ];\n\n  const [movies, setMovies] = useState([]);\n\n  // adding a second state to show loading data from api or done\n  const [isLoading, setIsloading] = useState(false);\n\n  // adding a second state to show error\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = async () => {\n    setIsloading(true);\n    setError(null);\n\n    // we use try catch to handle error when using async/await\n    // we have to throw error to catch in case http request errored\n\n    try {\n      const result = await fetch(\"https://swapi.dev/api/film\");\n      const data = await result.json();\n\n      if (!result.ok) {\n        throw new Error('Something went wrong');\n      }\n\n      // transform data\n      const transferomData = data.results.map((movie) => {\n        return {\n          id: movie.episode_id,\n          title: movie.title,\n          openingText: movie.opening_crawl,\n          releaseDate: movie.release_date,\n        };\n      });\n\n      setMovies(transferomData);\n      setIsloading(false);\n    } catch (error) {\n      setError(error.message);\n      setIsloading(false);\n    }\n  };\n\n  // way 2\n  // async function fetchMoviesHandler() {\n  //   const result = await fetch(\"https://swapi.dev/api/films\")\n  //   const data = await result.json()\n  //   // transform data\n  //   const transferomData = data.results.map((movie) => {\n  //     return {\n  //       id: movie.episode_id,\n  //       title: movie.title,\n  //       openingText: movie.opening_crawl,\n  //       releaseDate: movie.release_date,\n  //     };\n  //   });\n  //   setMovies(transferomData);\n  // }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {!isLoading && movies.length === 0 && <p>No movies to show</p>}\n        {isLoading && <p>Loading...</p>}\n        {!isLoading && error && <p>{error}</p>}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}